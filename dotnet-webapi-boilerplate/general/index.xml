<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>General on</title><link>/dotnet-webapi-boilerplate/general/</link><description>Recent content in General on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 24 Aug 2021 11:40:05 +0530</lastBuildDate><atom:link href="/dotnet-webapi-boilerplate/general/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>/dotnet-webapi-boilerplate/general/overview/</link><pubDate>Tue, 24 Aug 2021 11:40:05 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/overview/</guid><description>What&amp;rsquo;s fullstackhero&amp;rsquo;s .NET Web API Boilerplate? # fullstackhero&amp;rsquo;s .NET Web API Boilerplate is a starting point for your next .NET 6 Clean Architecture Project that incorporates the most essential packages and features your projects will ever need including out of the box Multi-Tenancy support. This project can save well over 200+ hours of development time for your team.
As the name suggests, this is an API / Server Boilerplate. You can find other Client Boilerplates that consume this API under @fullstackhero handle.</description></item><item><title>Development Environment</title><link>/dotnet-webapi-boilerplate/general/development-environment/</link><pubDate>Mon, 30 Aug 2021 00:59:34 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/development-environment/</guid><description>fullstackhero&amp;rsquo;s .NET WebApi Boilerplate Project Development needs you to have the following applications / tools available on your machine. Please Note that this project is being built on a Windows 10 Machine using Visual Studio Code IDE.
.NET SDK # As mentioned earlier, this project is built with the latest available .NET SDK, which is .NET 6.0. Since the SDK is currently at preview, the project will be released by Mid-November as soon as Microsoft launches .</description></item><item><title>Getting Started ðŸš€</title><link>/dotnet-webapi-boilerplate/general/getting-started/</link><pubDate>Mon, 30 Aug 2021 00:59:34 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/getting-started/</guid><description>Firstly, make sure that you have already setup your development environment that runs the prerequisite tools and SDKs. Refer Development Environment for details.
This guide will take you right from installing the fullstackhero .NET WebAPI Boilerplate package to testing the API using the provided Postman Collection!
To get started with this Boilerplate, here are the avaiable options.
Fork the Repository. Use this if you want to always keep your version of the Boilerplate up-to date with the latest changes.</description></item><item><title>API Testing</title><link>/dotnet-webapi-boilerplate/general/api-testing/</link><pubDate>Mon, 30 Aug 2021 00:59:34 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/api-testing/</guid><description>fullstackhero&amp;rsquo;s Web API can be tested via Postman as well as the built in Swagger.
Postman # Now that our application is up and running, let&amp;rsquo;s fire up POSTMAN and run some basic requests. You can find the updated Postman collection under the /postman folder of your solution. Import this postman collection on to your local Postman.
Note that I have set up some default collection variables to make things easier.</description></item><item><title>CLI Commands</title><link>/dotnet-webapi-boilerplate/general/cli-commands/</link><pubDate>Tue, 24 Aug 2021 11:40:05 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/cli-commands/</guid><description>Docker # Build # This command is to be executed from the root folder of the project.
docker build -t iammukeshm/dotnet-webapi:0.0.3-rc -t iammukeshm/dotnet-webapi:latest . Push to DockerHub # This command is to be executed from the root folder of the project.
docker push iammukeshm/dotnet-webapi Migrations # This command is to be executed from the Host Directory of the project.
dotnet ef migrations add &amp;lt;CommitMessage&amp;gt; --project .././Migrators/Migrators.&amp;lt;Provider&amp;gt;/ --context ApplicationDbContext -o Migrations/Application CommitMessage : Enter a commit message here.</description></item><item><title>Project Structure</title><link>/dotnet-webapi-boilerplate/general/project-structure/</link><pubDate>Tue, 24 Aug 2021 11:40:05 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/project-structure/</guid><description>fullstackhero&amp;rsquo;s .NET WebApi Boilerplate is based on Clean Architecture. In other words, Onion / Hexagonal Architecture. Read about the advantages and principles of Onion Architecture here â†’
General Structure # This means that the entire solution is built in such a way that it can be scaled, maintained easily by teams of developers. This WebAPI Solution Primarily consists of the following .csproj files.
â”œâ”€â”€ src â”‚ â”œâ”€â”€ Host.csproj â”‚ â”œâ”€â”€ Core â”‚ | â”œâ”€â”€ Application.</description></item><item><title>Changelogs</title><link>/dotnet-webapi-boilerplate/general/changelogs/</link><pubDate>Tue, 24 Aug 2021 11:40:05 +0530</pubDate><guid>/dotnet-webapi-boilerplate/general/changelogs/</guid><description>0.0.5-rc # Current Stable Version 28/11/2021
Fixed Password Reset / Forgot Fixed Omnisharp Warnings / Code Cleanup Fixed Repository Method Log Hangfire to Serilog - Thanks frankyjquintero Extras Hangfire extensions - Thanks frankyjquintero Hangfire implementation examples - Thanks frankyjquintero Separate JSON files for each Settings - Thanks unchase Added Events and Handlers via MediatR - Thanks frankyjquintero Moved to Tenancy Middleware - Thanks frankyjquintero &amp;amp; fretje Solution Cleanup - rulesets &amp;amp; analyzer - Thanks fretje Added More Functions for RepositoryAsync - Thanks ghaithprosoft Entity Database Seeding Simplified File-Scoped namespaces and implicit usings Better Folder Structure / Modular Minimal API 0.</description></item></channel></rss>